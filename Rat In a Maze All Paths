import java.util.*;
public class Solution {
    static ArrayList<ArrayList<Integer>> ans;
    static int n;
    static boolean[][] visited;
    public static void findAllPath(int[][] arr,int i,int j,ArrayList<ArrayList<Integer>> ds){
        if(i==n-1 && j==n-1){
            ArrayList<Integer> temp=new ArrayList<Integer>();
            for(ArrayList<Integer> val:ds){
                temp.addAll(val);
            }
            ans.add(temp);
            return ;
        }
        int[][] dir={     {0,-1} ,
                   {0,1}   , {-1,0}
                       ,{1,0}
                  };
        for(int[] d:dir){
            int x=i+d[0];
            int y=j+d[1];
            if(x>=0 && x<n && y>=0 && y<n && visited[x][y]==false && arr[x][y]==1){
                visited[x][y]=true;
                ds.get(x).set(y,1);
                findAllPath(arr,x,y,ds);
                ds.get(x).set(y,0);
                visited[x][y]=false;
            }
        }   
    }
    public static ArrayList<ArrayList<Integer>> ratInAMaze(int[][] maze, int N){
        // Write your code here.
        ans=new ArrayList<>();
        n=N;
        visited=new boolean[n][n];
        ArrayList<ArrayList<Integer>> ds=new ArrayList<>();
        for(int i=0 ; i<n ; i++){
            ds.add(new ArrayList<Integer>());
            for(int j=0;  j<n ; j++){
                ds.get(i).add(0);
            }
        }
        visited[0][0]=true;
        ds.get(0).set(0,1);
        findAllPath(maze,0,0,ds);
        Collections.reverse(ans);
        return ans;
    }
}
