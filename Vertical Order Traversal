/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.*;

public class Solution 
{
    static class Node{
        TreeNode root;
        int parent;
        public Node(TreeNode r,int p){
            root=r;
            parent=p;
        }
    }
    static int left,right;
    static ArrayList<ArrayList<Integer>> ans;
    public static void findWidth(TreeNode root,int parent){
        if(root!=null){
            findWidth(root.left,parent-1);
            left=Math.min(left,parent);
            right=Math.max(right,parent);
            findWidth(root.right,parent+1);
        }
    }
    public static void levelOrder(TreeNode r,int prnt){
        Queue<Node> q=new LinkedList<>();
        q.add(new Node(r,prnt));
        while(!q.isEmpty()){
            Queue<Node> temp=new LinkedList<>();
            //HashMap<Integer,ArrayList<Integer>> map=new HashMap<>();
            while(!q.isEmpty()){
                Node node=q.remove();
                TreeNode root=node.root;
                int parent=node.parent;
                Integer value=new Integer((int)root.data);
                ans.get(parent).add(value);
                if(root.left!=null){
                    temp.add(new Node(root.left,parent-1));
                }
                if(root.right!=null){
                    temp.add(new Node(root.right,parent+1));
                }
            }
            q=temp;
            
        }

    }
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) 
    {
        //    Write your code here.
        left=0;right=0;
        findWidth(root,0);
        left*=-1;
        int width=left+right+1;
        ans=new ArrayList<>();
        for(int i=0 ; i<width ; i++) ans.add(new ArrayList<Integer>());
        levelOrder(root,left);
        ArrayList<Integer> temp=new ArrayList<>();
        for(ArrayList<Integer> val:ans){
            temp.addAll(val);
        }
        return temp;
    }
}
