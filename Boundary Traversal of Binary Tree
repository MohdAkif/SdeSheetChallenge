/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.*;

public class Solution {
    static ArrayList<Integer> ans;
    public static void addLeft(TreeNode root){
        TreeNode temp=root.left;
        while(temp!=null){
            if(temp.left!=null || temp.right!=null) ans.add(temp.data);
            if(temp.left!=null) temp=temp.left;
            else temp=temp.right;
        }
    }
    public static void addLeaf(TreeNode root){
        if(root!=null && root.left==null && root.right==null) ans.add(root.data);
        if(root.left!=null) addLeaf(root.left);
        if(root.right!=null) addLeaf(root.right);       
    }
    public static void addRight(TreeNode root){
        ArrayList<Integer> arr=new ArrayList<>();
        TreeNode temp=root.right;
        while(temp!=null){
            if(temp.left!=null || temp.right!=null) arr.add(temp.data);
            if(temp.right!=null) temp=temp.right;
            else temp=temp.left;
        }
        for(int i=arr.size()-1 ; i>=0 ; i--) ans.add(arr.get(i));   
    }
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
		// Write your code here.
        ans=new ArrayList<>();
        if(root!=null && (root.left!=null || root.right!=null)) ans.add(root.data);
        addLeft(root);addLeaf(root);addRight(root);
        
        return ans;
	}
}
