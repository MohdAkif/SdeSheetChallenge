/*
	Following is the class used to represent the object/node of the Binary Tree

	class BinaryTreeNode<T> {
	    T data;
	    BinaryTreeNode<T> left;
	    BinaryTreeNode<T> right;

	    public BinaryTreeNode(T data) {
	        this.data = data;
	    }
	}
*/
import java.util.*;
public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		// Write your code here!
        Stack<BinaryTreeNode> stack=new Stack<>();
        List<Integer> ans=new ArrayList<>();
        if(root==null) return ans;
        stack.push(root);
        boolean flag=true;
        while(!stack.isEmpty()){
            Stack<BinaryTreeNode> temp=new Stack<>();
            if(flag==true){
                flag=false;
                while(!stack.isEmpty()){
                    BinaryTreeNode x=stack.pop();
                    ans.add((int)x.data);
                    if(x.left!=null) temp.push(x.left);
                    if(x.right!=null) temp.push(x.right);

                }
            }
            else{
                flag=true;
                while(!stack.isEmpty()){
                    BinaryTreeNode x=stack.pop();
                    ans.add((int)x.data);
                    if(x.right!=null) temp.push(x.right);
                    if(x.left!=null) temp.push(x.left);

                }
            }
            stack=temp;
        }
        return ans;
	}
}
