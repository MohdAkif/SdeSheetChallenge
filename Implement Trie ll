public class Trie {
    static class Node{
        Node[] link=new Node[26];
        int ew=0;
        int cp=0;
        public boolean containsKey(char ch){
            return link[ch-'a']!=null;
        }
        public void put(Node node,char ch){
            link[ch-'a']=node;
        }
        public Node get(char ch){
            return link[ch-'a'];
        }
    }
    static Node root;
    public Trie() {
        // Write your code here.
        root=new Node();
    }

    public void insert(String word) {
        // Write your code here.
        Node temp=root;
        for(int i=0 ; i<word.length() ; i++){
            if(!temp.containsKey(word.charAt(i))){
                temp.put(new Node(),word.charAt(i));
            }
            temp=temp.get(word.charAt(i));
            temp.cp++;
        }
        temp.ew++;
    }

    public int countWordsEqualTo(String word) {
        // Write your code here.
        Node temp=root;
        for(int i=0 ; i<word.length() ; i++){
            if(!temp.containsKey(word.charAt(i)))
                return 0;
            temp=temp.get(word.charAt(i));
        }
        return temp.ew;
    }

    public int countWordsStartingWith(String word) {
        // Write your code here.
        Node temp=root;
        for(int i=0 ; i<word.length() ; i++){
            if(!temp.containsKey(word.charAt(i)))
                return 0;
            temp=temp.get(word.charAt(i));
        }
        return temp.cp;
    }

    public void erase(String word) {
        // Write your code here.
        Node temp=root;
        for(int i=0;  i<word.length() ; i++){
            if(!temp.containsKey(word.charAt(i)))
               return ;
            temp=temp.get(word.charAt(i));
            temp.cp--;
        }
        temp.ew--;
    }

}
