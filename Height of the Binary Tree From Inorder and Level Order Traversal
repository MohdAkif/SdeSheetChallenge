public class Solution {
    static int n;
    public static int findHeight(int[] levelOrder,int[] inOrder,int s,int e){
        if(e==s)
            return 0;
        else{
            boolean flag=false;
            int index=0;
            for(int j=0 ; j<n ; j++){
                for(int i=s ;  i<=e ; i++){
                    if(levelOrder[j]==inOrder[i]){
                        index=i;
                        flag=true;
                        break;
                    }
                }
                if(flag==true) break;
            }
            if(flag==true){
            int left=findHeight(levelOrder,inOrder,s,index-1);
            int right=findHeight(levelOrder,inOrder,index+1,e);
            return Math.max(left,right)+1;
            }
            else return 0;
        }
    }
	public static int heightOfTheTree(int[] inorder, int[] levelOrder, int N){
		// Write your code here.
        n=N;
        return findHeight(levelOrder,inorder,0,n-1);
	}
}
/*
inOrder=> 4 2 5 1 3
lever=>   1 2 3 4 5
                     1(index=3)
        4 2 5(s=0,e=2)          3(s=4,e=4)
        1 2 3 4 5               1 2 3 4 5
          2(index=1)
   4(s=0,e=0)       5(s=2,e=2)
   1 2 3 4 5        1 2 3 4 5
           
*/
